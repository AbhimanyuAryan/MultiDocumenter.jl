module MultiDocumenter

# ToDo:
# - global search

import Documenter, Gumbo, AbstractTrees

abstract type NavElement end

struct MultiDocRef <: NavElement
    upstream::String

    path::String
    name::String
end

struct BrandImage <: NavElement
    path::String
    imagepath::String
end

function MultiDocRef(;upstream, name, path)
    MultiDocRef(upstream, path, name)
end

"""
    make(
        outdir,
        docs::Vector{MultiDocRef};
        assets_dir,
        brand_image,
        custom_stylesheets
    )

Aggregates multiple Documenter.jl-based documentation pages `docs` into `outdir`.

- `assets_dir` is copied into `outdir/assets`
- `brand_image` is a `BrandImage(path, imgpath)`, which is rendered as the leftmost
  item in the global navigation
- `custom_stylesheets` is a `Vector{String}` of stylesheets injected into each page.
"""
function make(
        outdir,
        docs::Vector{MultiDocRef};
        assets_dir = nothing,
        brand_image::Union{Nothing,BrandImage} = nothing,
        custom_stylesheets = []
    )

    dir = make_output_structure(docs)
    if assets_dir !== nothing && isdir(assets_dir)
        cp(assets_dir, joinpath(dir, "assets"))
    end
    inject_styles_and_global_navigation(dir, docs, brand_image, custom_stylesheets)

    cp(dir, outdir; force = true)
    rm(dir; force = true, recursive = true)

    return outdir
end

function make_output_structure(docs::Vector)
    dir = mktempdir()

    for doc in docs
        cp(doc.upstream, joinpath(dir, doc.path))
    end

    open(joinpath(dir, "index.html"), "w") do io
        println(io, """
            <!--This file is automatically generated by MultiDocumenter.jl-->
            <meta http-equiv="refresh" content="0; url=./$(first(docs).path)/index.html"/>
        """)
    end

    return dir
end

function make_global_nav(dir, docs, thispagepath, brand_image)
    nav = Gumbo.HTMLElement{:nav}([], Gumbo.NullNode(), Dict(
        "id" => "multi-page-nav"
    ))

    if brand_image !== nothing
        a = Gumbo.HTMLElement{:a}([], nav, Dict(
            "class" => "brand",
            "href" => relpath(joinpath(dir, brand_image.path), thispagepath)
        ))
        img = Gumbo.HTMLElement{:img}([], a, Dict(
            "src" => relpath(joinpath(dir, brand_image.imagepath), thispagepath)
        ))
        push!(a.children, img)
        push!(nav.children, a)
    end

    ul = Gumbo.HTMLElement{:ul}([], nav, Dict())
    push!(nav.children, ul)

    for doc in docs
        li = Gumbo.HTMLElement{:li}([], ul, Dict())
        # Main.@infiltrate
        rp = relpath(joinpath(dir, doc.path), thispagepath)
        a = Gumbo.HTMLElement{:a}([], li, Dict(
            "href" => string(rp, "/", "index.html"),
            "class" => startswith(thispagepath, joinpath(dir, doc.path)) ? "nav-link active" : "nav-link"
        ))
        push!(a.children, Gumbo.HTMLText(li, doc.name))
        push!(li.children, a)
        push!(ul.children, li)
    end
    return nav
end

function make_global_stylesheet(custom_stylesheets, path)
    default_styles = read(joinpath(@__DIR__, "..", "assets", "multidoc.css"), String)
    out = []

    style = Gumbo.HTMLElement{:style}([], Gumbo.NullNode(), Dict())
    style_content = Gumbo.HTMLText(
        style,
        default_styles
    )
    push!(style.children, style_content)
    push!(out, style)

    for stylesheet in custom_stylesheets
        style = Gumbo.HTMLElement{:link}([], Gumbo.NullNode(), Dict(
            "rel" => "stylesheet",
            "type" => "text/css",
            "href" => joinpath(path, stylesheet)
        ))
        push!(out, style)
    end

    return out
end

function headroom_injector()
    return raw"""
    require(['jquery', 'headroom', 'headroom-jquery'], function($, Headroom) {
        $(document).ready(function() {
            $('#multi-page-nav').headroom({
            "tolerance": {"up": 10, "down": 10},
            });
        })
    })
    """
end

function inject_styles_and_global_navigation(
        dir,
        docs::Vector{MultiDocRef},
        brand_image::BrandImage,
        custom_stylesheets
    )


    for (root, _, files) in walkdir(dir)
        for file in files
            path = joinpath(root, file)
            if file == "documenter.js"
                open(path, "a") do io
                    println(io, headroom_injector())
                end
                continue
            end
            # no need to do anything about /index.html
            path == joinpath(dir, "index.html") && continue

            endswith(file, ".html") || continue


            islink(path) && continue
            isfile(path) || continue

            stylesheets = make_global_stylesheet(custom_stylesheets, relpath(dir, root))

            page = read(path, String)
            doc = Gumbo.parsehtml(page)
            injected = 0

            for el in AbstractTrees.PreOrderDFS(doc.root)
                injected >= 2 && break

                if el isa Gumbo.HTMLElement
                    if Gumbo.tag(el) == :head
                        for stylesheet in stylesheets
                            stylesheet.parent = el
                            push!(el.children, stylesheet)
                        end

                        # headroom_script.parent = el
                        # push!(el.children, headroom_script)
                        injected += 1
                    elseif Gumbo.tag(el) == :body && !isempty(el.children)
                        documenter_div = first(el.children)
                        if documenter_div isa Gumbo.HTMLElement &&
                            Gumbo.getattr(documenter_div, "id", "") == "documenter"
                            # inject global navigation as first element in body

                            global_nav = make_global_nav(dir, docs, root, brand_image)
                            global_nav.parent = el
                            pushfirst!(el.children, global_nav)
                            injected += 1
                        else
                            @warn "Could not inject global nav into $path."
                        end
                    end
                end
            end

            open(path, "w") do io
                print(io, doc)
            end
        end
    end
end

end