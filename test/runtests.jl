using MultiDocumenter
using Test

@testset "MultiDocumenter.jl" begin
    clonedir = mktempdir()

    docs = [
        ("JuliaDebug/Infiltrator.jl.git", "gh-pages") => MultiDocumenter.MultiDocRef(
            upstream = joinpath(clonedir, "Infiltrator"),
            path = "inf",
            name = "Infiltrator"
        ),
    ]

    for ((remote, branch), docref) in docs
        run(`git clone --depth 1 git@github.com:$remote --branch $branch --single-branch $(docref.upstream)`)
    end

    outpath = joinpath(@__DIR__, "out")

    MultiDocumenter.make(
        outpath,
        collect(last.(docs));
        search_engine = MultiDocumenter.SearchConfig(
            index_versions = ["stable"],
            engine = MultiDocumenter.FlexSearch
        )
    )

    @testset "flexsearch" begin
        @test isdir(outpath, "inf")
        @test isdir(outpath, "inf", "stable")
        @test isfile(outpath, "inf", "stable", "index.html")

        @test read(joinpath(outpath, "inf", "index.html"), String) == """
        <!--This file is automatically generated by Documenter.jl-->
        <meta http-equiv="refresh" content="0; url=./stable/"/>
        """

        @test isdir(outpath, "search-data")
        store_content = read(joinpath(outpath, "search-data", "store.json"), String)
        @test !isempty(store_content)
        @test occursin("Infiltrator.jl", store_content)
        @test occursin("@infiltrate", store_content)
    end

    rm(outpath, recursive=true, force=true)
    rm(clonedir, recursive=true, force=true)
end
